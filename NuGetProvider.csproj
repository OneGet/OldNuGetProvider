<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="12.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <Import Condition="Exists( '$(MSBuildThisFileDirectory)packages\Outercurve.MSBuildTasks.1.0.0.1\build\Outercurve.MSBuildTasks.tasks' )" Project="$(MSBuildThisFileDirectory)packages\Outercurve.MSBuildTasks.1.0.0.1\build\Outercurve.MSBuildTasks.tasks" />
  <Import Project="$(MSBuildExtensionsPath)\$(MSBuildToolsVersion)\Microsoft.Common.props" Condition="Exists('$(MSBuildExtensionsPath)\$(MSBuildToolsVersion)\Microsoft.Common.props')" />
  <PropertyGroup>
    <PSVersion>$(registry:HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\PowerShell\3\PowerShellEngine@PowerShellVersion)</PSVersion>
    <!-- 
        If you have PowerShell 5.0 or greater installed, you must compile this with .NET 4.5 or higher
        otherwise, we'll assume .Net 4.0 for the assemblies.
    -->
    <TargetFrameworkVersion Condition="($(PSVersion.Substring(0,1)) &gt; 4) AND ($(TargetFrameworkVersion) == '' Or $(TargetFrameworkVersion) == '*Undefined*')">v4.5</TargetFrameworkVersion>
    <TargetFrameworkVersion Condition="($(PSVersion.Substring(0,1)) &lt; 5) AND ($(TargetFrameworkVersion) == '' Or $(TargetFrameworkVersion) == '*Undefined*')">v4.0</TargetFrameworkVersion>
  
    <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
    <Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform>
    <ProjectGuid>{6EE48B32-D449-47A5-B69F-B2D8E9BAD867}</ProjectGuid>
    <OutputType>Library</OutputType>
    <AppDesignerFolder>Properties</AppDesignerFolder>
    <RootNamespace>Microsoft.PackageManagement.NuGetProvider</RootNamespace>
    <AssemblyName>Microsoft.PackageManagement.NuGetProvider</AssemblyName>
    <FileAlignment>512</FileAlignment>
    <!-- Community Build Settings -->
    <OutputPath>$(MSBuildThisFileDirectory)output\$(TargetFrameworkVersion.Replace(".",""))\$(Configuration)\bin\</OutputPath>
    <SignedDir>$(MSBuildThisFileDirectory)output\$(TargetFrameworkVersion.Replace(".",""))\$(Configuration)\Signed\</SignedDir>
    <BaseIntermediateOutputPath>$(MSBuildThisFileDirectory)intermediate\$(TargetFrameworkVersion.Replace(".",""))\$(Configuration)\$(AssemblyName)\</BaseIntermediateOutputPath>
    <IntermediateOutputPath>$(BaseIntermediateOutputPath)</IntermediateOutputPath>
    <DocumentationFile>$(OutputPath)$(AssemblyName).XML</DocumentationFile>
    
    <Prefer32Bit>false</Prefer32Bit>
    <NoWarn>1591,3002,3003,3008,3009</NoWarn>
    <RestorePackages>true</RestorePackages>
    <DefineConstants>FRAMEWORK$(TargetFrameworkVersion.Replace(".",""))</DefineConstants>
    <OutputRelativePath>output\$(TargetFrameworkVersion.Replace(".",""))\$(Configuration)\bin\</OutputRelativePath>
    
    <StartAction>Program</StartAction>
    <StartProgram>c:\windows\system32\windowspowerShell\v1.0\powershell.exe</StartProgram>
    <StartArguments>-noexit %24debugPreference = %27Continue%27 %3b get-packageprovider -verbose</StartArguments>

  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Debug|AnyCPU' ">
    <DebugSymbols>true</DebugSymbols>
    <DebugType>full</DebugType>
    <Optimize>false</Optimize>
    <DefineConstants>$(DefineConstants);DEBUG;TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Release|AnyCPU' ">
    <DebugType>pdbonly</DebugType>
    <Optimize>true</Optimize>
    <DefineConstants>TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <ItemGroup>
    <Reference Include="nuget, Version=2.8.50926.602, Culture=neutral, processorArchitecture=x86">
      <SpecificVersion>False</SpecificVersion>
      <HintPath>libs\nuget.exe</HintPath>
    </Reference>
    <Reference Include="System" />
    <Reference Include="System.Core" />
    <Reference Include="System.Management.Automation, Version=3.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35, processorArchitecture=MSIL">
      <SpecificVersion>False</SpecificVersion>
      <HintPath>..\..\..\Program Files (x86)\Reference Assemblies\Microsoft\WindowsPowerShell\3.0\System.Management.Automation.dll</HintPath>
    </Reference>
    <Reference Include="System.Xml.Linq" />
    <Reference Include="System.Data.DataSetExtensions" />
    <Reference Include="Microsoft.CSharp" />
    <Reference Include="System.Data" />
    <Reference Include="System.Xml" />
    <Reference Include="WindowsBase" />
  </ItemGroup>
  <ItemGroup>
    <Compile Include="assembly-version.cs" />
    <Compile Include="Chocolatey\ChocolateyProvider.cs" />
    <Compile Include="Chocolatey\ChocolateyRequest.cs" />
    <Compile Include="Chocolatey\ChocolateyScript.cs" />
    <Compile Include="Chocolatey\Snapshot.cs" />
    <Compile Include="Common\AsyncProcess.cs" />
    <Compile Include="Common\CommonProvider.cs" />
    <Compile Include="Common\EnvironmentUtility.cs" />
    <Compile Include="Common\Extensions.cs" />
    <Compile Include="Common\ImplictLazy.cs" />
    <Compile Include="Common\NativeMethods.cs" />
    <Compile Include="Common\PackageItem.cs" />
    <Compile Include="Common\PackageSource.cs" />
    <Compile Include="Common\CommonRequest.cs" />
    <Compile Include="Nuget\NuGetProvider.cs" />
    <Compile Include="Nuget\NuGetRequest.cs" />
    <Compile Include="Platform\CLSID.cs" />
    <Compile Include="Platform\IID.cs" />
    <Compile Include="Platform\IShellLink.cs" />
    <Compile Include="Platform\ShellApplication.cs" />
    <Compile Include="Platform\ShellLink.cs" />
    <Compile Include="Platform\ShellLinkClass.cs" />
    <Compile Include="Platform\SLGP.cs" />
    <Compile Include="Platform\STGM.cs" />
    <Compile Include="Platform\Win32FindData.cs" />
    <Compile Include="Properties\AssemblyInfo.cs" />
    <Compile Include="Resources\Messages.Designer.cs" />
    <Compile Include="Sdk\Constants.cs" />
    <Compile Include="Sdk\ErrorCategory.cs" />
    <Compile Include="Sdk\Request.cs" />
  </ItemGroup>
  <ItemGroup>
    <EmbeddedResource Include="Resources\Messages.resx" />
  </ItemGroup>
  <ItemGroup>
    <EmbeddedResource Include="Chocolatey\ChocolateyHelpers.psm1" />
    <None Include="provider.manifest" />
  </ItemGroup>
  <Import Project="$(MSBuildToolsPath)\Microsoft.CSharp.targets" />
  <PropertyGroup>
    <BeforeBuildScript>
      # remove old merged file.
      erase -force -ea silentlycontinue "$(TargetDir)nuget-anycpu-*.exe"
      
      # make sure the signed output folder is created
      mkdir -force -ea silentlycontinue "$(SignedDir)"
      
      # unregister any previously compiled assembly
      mkdir hkcu:software\Microsoft\PackageManagement -ea silentlycontinue
      Set-ItemProperty -Path hkcu:software\Microsoft\PackageManagement -Name NuGet -Value $null
    </BeforeBuildScript>
    <AfterBuildScript><![CDATA[
      # Find the manifest tool, sometimes it's not in the PATH 
      $MTEXE = ((Get-ItemProperty -Path HKCU:\Software\PackageManagement\Tools\MT.EXE -Name Path -ea 0).Path) 
      
      if( -not $MTEXE ) { 
          $MTEXE = ((dir ${env:ProgramFiles(x86)} -recurse -ea 0|  where -property name -eq mt.exe | select -first 1 ).FullName) 
          $null = mkdir -Path HKCU:\Software\PackageManagement\Tools\MT.EXE -Force 
          $null = New-ItemProperty -Path HKCU:\Software\PackageManagement\Tools\MT.EXE -Name Path -Value $MTEXE -force
      } 
      
      # get the version of the file we just built
      $file = resolve-path "$(TargetDir)Microsoft.PackageManagement.NuGetProvider.dll" 
      $version = [System.Diagnostics.FileVersionInfo]::GetVersionInfo( $file ).fileversion
      
      # update the manifest to the right version.
      $manifestfile = resolve-path  "$(MSBuildThisFileDirectory)\provider.manifest"
      $newver = "version='$version'"
      
      $newContent = (get-content -raw $manifestfile ) -replace "version='.*'",$newver
      $newContent = $newContent.Trim();
      set-content $manifestfile $newcontent 
      
      # Run the manifest tool to add the Swidtag Manifest onto the assembly
      # (this allows oneget to use it as a provider!)
      $null = & "$MTEXE" -manifest "$manifestfile" "-outputresource:$(TargetPath);#101"
    
      # register the assembly for use by OneGet by sticking in a registry key.
      mkdir hkcu:software\Microsoft\PackageManagement -ea silentlycontinue
      Set-ItemProperty -Path hkcu:software\Microsoft\PackageManagement -Name NuGet -Value "$(TargetPath)"
      
      if( "$(Configuration)" -eq "Release" ) {
        $frameworkPath = "${env:programfiles(x86)}\Reference Assemblies\Microsoft\Framework\.NetFramework\v4.0"
        if( -not (test-path $frameworkPath )) {
          throw "can't find framework path at $frameworkPath "
        }
      
        #we need a copy of sma.dll 
        $null = copy "C:\Program Files (x86)\Reference Assemblies\Microsoft\WindowsPowerShell\3.0\System.Management.Automation.dll" $(TargetDir)

        $outputFile = "$(TargetDir)nuget-anycpu-$version.exe"

        #merge the assemblies
        $null = echo "Merging assemblies into single release assembly"
        $null =  .\tools\ILMerge.exe /targetplatform:"v4,$frameworkPath" /out:$outputFile  /log:.\ilrepack.log /allowDup /ver:$version /attr:$(TargetDir)Microsoft.PackageManagement.NuGetProvider.dll  $(TargetDir)nuget.exe  $(TargetDir)Microsoft.PackageManagement.NuGetProvider.dll 
      
        if( test-path $outputFile  ) {
          return $outputFile 
        }
        return $null
      }
    ]]></AfterBuildScript>
  </PropertyGroup>
  <Target Name="BeforeBuild">
    <PowerShell ScriptBlock="$(BeforeBuildScript)" />
  </Target>
  <Target Name="AfterBuild">
    <PowerShell ScriptBlock="$(AfterBuildScript)">
      <Output PropertyName="outputFile" TaskParameter="Outputs" />
    </PowerShell>
    <SetSignature Condition="'$(OUTERCURVE_TOKEN)' != '' AND '$(outputFile)' != '' " InputFiles="$(outputFile)" OutputDir="$(SignedDir)" StrongName="false" ContinueOnError="false" ServiceUrl="http://api.outercurve.org" UserName="gserack" Password="$(OUTERCURVE_TOKEN)" />
  </Target>
  <UsingTask TaskName="PowerShell" TaskFactory="CodeTaskFactory" AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.v12.0.dll">
    <ParameterGroup>
      <ScriptBlock ParameterType="System.String" Required="true" />
      <Inputs ParameterType="Microsoft.Build.Framework.ITaskItem[]" />
      <Outputs ParameterType="Microsoft.Build.Framework.ITaskItem[]" Output="true" />
    </ParameterGroup>
    <Task>
      <Reference Include="System.Management.Automation" />
      <Using Namespace="System" />
      <Using Namespace="System.Linq" />
      <Using Namespace="System.Management.Automation" />
      <Using Namespace="System.Management.Automation.Runspaces" />
      <Using Namespace="System.Text" />
      <Using Namespace="Microsoft.Build.Framework" />
      <Using Namespace="Microsoft.Build.Utilities" />
      <Code Type="Fragment" Language="cs"><![CDATA[
        var ps = System.Management.Automation.PowerShell.Create();
        ps.AddScript( ScriptBlock );
        List<ITaskItem> outs = new List<ITaskItem>();
        
        foreach( var i in ((IEnumerable<object>)ps.Invoke((Inputs ?? new ITaskItem[0]).Where( each => each != null ).Select( each => each.ToString() ))).Where( each => each != null ).Select( each => new TaskItem( each.ToString() )) ) { 
          outs.Add( i );
          Console.WriteLine( i.ToString() ); 
        }
        
        Outputs = outs.ToArray();
      ]]></Code>
    </Task>
  </UsingTask>
</Project>
